/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PointsSystemInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admins"
      | "assignAdmin"
      | "assignPoints"
      | "earnPoints"
      | "members"
      | "owner"
      | "redeemReward"
      | "registerMember"
      | "transferPoints"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MemberRegistered"
      | "PointsAssigned"
      | "PointsEarned"
      | "PointsTransferred"
      | "RewardClaimed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "assignAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assignPoints",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earnPoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMember",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPoints",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assignAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assignPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earnPoints", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPoints",
    data: BytesLike
  ): Result;
}

export namespace MemberRegisteredEvent {
  export type InputTuple = [member: AddressLike, name: string];
  export type OutputTuple = [member: string, name: string];
  export interface OutputObject {
    member: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsAssignedEvent {
  export type InputTuple = [
    admin: AddressLike,
    member: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [admin: string, member: string, amount: bigint];
  export interface OutputObject {
    admin: string;
    member: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsEarnedEvent {
  export type InputTuple = [member: AddressLike, amount: BigNumberish];
  export type OutputTuple = [member: string, amount: bigint];
  export interface OutputObject {
    member: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsTransferredEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    member: AddressLike,
    reward: BigNumberish,
    cost: BigNumberish
  ];
  export type OutputTuple = [member: string, reward: bigint, cost: bigint];
  export interface OutputObject {
    member: string;
    reward: bigint;
    cost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PointsSystem extends BaseContract {
  connect(runner?: ContractRunner | null): PointsSystem;
  waitForDeployment(): Promise<this>;

  interface: PointsSystemInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  assignAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  assignPoints: TypedContractMethod<
    [memberAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  earnPoints: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  members: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        name: string;
        points: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  redeemReward: TypedContractMethod<
    [reward: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerMember: TypedContractMethod<
    [memberName: string],
    [void],
    "nonpayable"
  >;

  transferPoints: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "assignAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assignPoints"
  ): TypedContractMethod<
    [memberAddress: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earnPoints"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "members"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        name: string;
        points: bigint;
        isRegistered: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeemReward"
  ): TypedContractMethod<[reward: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerMember"
  ): TypedContractMethod<[memberName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferPoints"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MemberRegistered"
  ): TypedContractEvent<
    MemberRegisteredEvent.InputTuple,
    MemberRegisteredEvent.OutputTuple,
    MemberRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "PointsAssigned"
  ): TypedContractEvent<
    PointsAssignedEvent.InputTuple,
    PointsAssignedEvent.OutputTuple,
    PointsAssignedEvent.OutputObject
  >;
  getEvent(
    key: "PointsEarned"
  ): TypedContractEvent<
    PointsEarnedEvent.InputTuple,
    PointsEarnedEvent.OutputTuple,
    PointsEarnedEvent.OutputObject
  >;
  getEvent(
    key: "PointsTransferred"
  ): TypedContractEvent<
    PointsTransferredEvent.InputTuple,
    PointsTransferredEvent.OutputTuple,
    PointsTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;

  filters: {
    "MemberRegistered(address,string)": TypedContractEvent<
      MemberRegisteredEvent.InputTuple,
      MemberRegisteredEvent.OutputTuple,
      MemberRegisteredEvent.OutputObject
    >;
    MemberRegistered: TypedContractEvent<
      MemberRegisteredEvent.InputTuple,
      MemberRegisteredEvent.OutputTuple,
      MemberRegisteredEvent.OutputObject
    >;

    "PointsAssigned(address,address,uint256)": TypedContractEvent<
      PointsAssignedEvent.InputTuple,
      PointsAssignedEvent.OutputTuple,
      PointsAssignedEvent.OutputObject
    >;
    PointsAssigned: TypedContractEvent<
      PointsAssignedEvent.InputTuple,
      PointsAssignedEvent.OutputTuple,
      PointsAssignedEvent.OutputObject
    >;

    "PointsEarned(address,uint256)": TypedContractEvent<
      PointsEarnedEvent.InputTuple,
      PointsEarnedEvent.OutputTuple,
      PointsEarnedEvent.OutputObject
    >;
    PointsEarned: TypedContractEvent<
      PointsEarnedEvent.InputTuple,
      PointsEarnedEvent.OutputTuple,
      PointsEarnedEvent.OutputObject
    >;

    "PointsTransferred(address,address,uint256)": TypedContractEvent<
      PointsTransferredEvent.InputTuple,
      PointsTransferredEvent.OutputTuple,
      PointsTransferredEvent.OutputObject
    >;
    PointsTransferred: TypedContractEvent<
      PointsTransferredEvent.InputTuple,
      PointsTransferredEvent.OutputTuple,
      PointsTransferredEvent.OutputObject
    >;

    "RewardClaimed(address,uint8,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
  };
}
